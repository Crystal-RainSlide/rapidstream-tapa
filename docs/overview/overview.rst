Overview
------------------

There are two key components in the RapidStream TAPA framework:

- The TAPA frontend provides API for expressing task-parallel accelerators in C++ and compiles the design into Verilog RTL.
- The RapidStream backend optimizes the generated RTL for high frequency and partitions the design for parallel placement and routing.

The TAPA frontend can be used standalone as an HLS tool, while the RapidStream backend can be optinally used to
maximize the achievable frequency of TAPA designs.

TAPA
------------------

TAPA programs describe parallel HLS ``tasks`` communicating through ``streams``. TAPA 
compiler synthesizes the program into standalone and fully-functional Verilog RTL.

- A ``stream`` is essentially a FIFO
- A ``task`` consumes input data from some ``streams``, perform computation,
  then produces output data to some other ``streams``.
- All ``tasks`` execute in parallel and communicate with each other through
  ``streams``.


.. image:: https://user-images.githubusercontent.com/32432619/167315788-4f4c7241-d7bb-454d-80d2-94a3eae505a5.png
  :width: 100 %

TAPA is built on top of Vitis HLS. The TAPA compilation process ultimately involves two steps.

- First, TAPA extracts each ``task`` and synthesize it independently using Vitis HLS.

- Second, TAPA generates interconnect logic to compose the RTL of each task
  together into the final accelerator.

.. image:: https://user-images.githubusercontent.com/32432619/167316153-926db74c-add0-4a8e-aa88-fedaa2d3d669.png
  :width: 100 %


RapidStream
------------

RapidStream performs the partition-and-pipeline optimization on the RTL generated by TAPA.
RapidStream automatically floorplan the design across the FPGA to achieve balanced resource utilization 
and insert pipeline registers between tasks to maximize the frequency.


Hello World Example
--------------------