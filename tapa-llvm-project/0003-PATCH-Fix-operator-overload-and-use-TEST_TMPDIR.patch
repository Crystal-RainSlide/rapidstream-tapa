From 71f4493b2c75c846a69203a0cc8545bbe8abfa64 Mon Sep 17 00:00:00 2001
From: Jason Lau <lau@rapidstream-da.com>
Date: Tue, 20 Aug 2024 11:18:20 -0700
Subject: [PATCH 3/3] [PATCH] Fix operator overload and use `TEST_TMPDIR`

Credit: Alexander Khabarov <alexander.khabarov@arm.com>

---
 llvm/include/llvm/ADT/STLExtras.h | 37 ++++++++++++++++++++++---------
 llvm/lib/Support/Unix/Path.inc    |  2 +-
 2 files changed, 28 insertions(+), 11 deletions(-)

diff --git a/llvm/include/llvm/ADT/STLExtras.h b/llvm/include/llvm/ADT/STLExtras.h
index 79b145632..a071c4569 100644
--- a/llvm/include/llvm/ADT/STLExtras.h
+++ b/llvm/include/llvm/ADT/STLExtras.h
@@ -1315,16 +1315,16 @@ public:
   }
 
   /// Compare this range with another.
-  template <typename OtherT>
-  friend bool operator==(const indexed_accessor_range_base &lhs,
-                         const OtherT &rhs) {
-    return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
-  }
-  template <typename OtherT>
-  friend bool operator!=(const indexed_accessor_range_base &lhs,
-                         const OtherT &rhs) {
-    return !(lhs == rhs);
-  }
+  template <typename DerivedT0, typename BaseT0, typename T0,
+            typename PointerT0, typename ReferenceT0,
+            typename OtherT>
+  friend bool operator==(const indexed_accessor_range_base<DerivedT0, BaseT0, T0, PointerT0, ReferenceT0> &lhs,
+                         const OtherT &rhs);
+  template <typename DerivedT0, typename BaseT0, typename T0,
+            typename PointerT0, typename ReferenceT0,
+            typename OtherT>
+  friend bool operator!=(const indexed_accessor_range_base<DerivedT0, BaseT0, T0, PointerT0, ReferenceT0> &lhs,
+                         const OtherT &rhs);
 
   /// Return the size of this range.
   size_t size() const { return count; }
@@ -1388,6 +1388,23 @@ protected:
   /// The size from the owning range.
   ptrdiff_t count;
 };
+
+template <typename DerivedT, typename BaseT, typename T,
+          typename PointerT, typename ReferenceT,
+          typename OtherT>
+bool operator==(const indexed_accessor_range_base<DerivedT, BaseT, T, PointerT, ReferenceT> &lhs,
+                const OtherT &rhs) {
+  return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
+}
+
+template <typename DerivedT, typename BaseT, typename T,
+          typename PointerT, typename ReferenceT,
+          typename OtherT>
+bool operator!=(const indexed_accessor_range_base<DerivedT, BaseT, T, PointerT, ReferenceT> &lhs,
+                const OtherT &rhs) {
+  return !(lhs == rhs);
+}
+
 } // end namespace detail
 
 /// This class provides an implementation of a range of
diff --git a/llvm/lib/Support/Unix/Path.inc b/llvm/lib/Support/Unix/Path.inc
index 3efcad4f2..22841cbd8 100644
--- a/llvm/lib/Support/Unix/Path.inc
+++ b/llvm/lib/Support/Unix/Path.inc
@@ -1427,7 +1427,7 @@ bool cache_directory(SmallVectorImpl<char> &result) {
 static const char *getEnvTempDir() {
   // Check whether the temporary directory is specified by an environment
   // variable.
-  const char *EnvironmentVariables[] = {"TMPDIR", "TMP", "TEMP", "TEMPDIR"};
+  const char *EnvironmentVariables[] = {"TEST_TMPDIR", "TMPDIR", "TMP", "TEMP", "TEMPDIR"};
   for (const char *Env : EnvironmentVariables) {
     if (const char *Dir = std::getenv(Env))
       return Dir;
-- 

